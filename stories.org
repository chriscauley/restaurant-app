* Authentication
** User must be able to create an account and log in.
** New users need to verify their account by email.
   Users should not be able to log in until this verification is complete.
** Social auth
   Log in using at least two social media providers (Google, Twitter, Github).
* Implement 2 roles with different permission levels
** Regular User: Can see all restaurants and place orders from them
** Restaurant Owner: Can CRUD restaurants and meal
* models
** User
*** Profile pic (custom + social-auth)
** Restaurant
*** name
*** description (of the type of food they serve)
** meal
*** restaurant
*** name
*** description
*** price
** Order
*** created
*** Status
*** fk restaurant
*** m2m OrderItem (Dish + quantity)
* All users can change the Order Status
** [All users === Restaurant Owners and Regular Users]
** statuses
   Placed: Once a Regular user places an Order
   Canceled: If the Regular User cancel the Order
   Processing: Once the Restaurant Owner starts to make the meals
   In Route: Once the meal is finished and Restaurant Owner marks it’s on the way
   Delivered: Once the Restaurant Owner receives information that the meal was delivered by their staff
   Received: Once the Regular User receives the meal and marks it as Received
** Restaurant Owners have the ability to block a User
** Status should follow the sequence as stated above, and not allowed to move back
** Status can not be changed by a different user than is stated above
** Orders should have a history about the date and time of the status changing
* Both Regular Users and Restaurant Owners should be able to see a list of their orders
* REST API
  Make it possible to perform all user actions via the API, including authentication (If a mobile application and you don’t know how to create your own backend you can use Firebase.com or similar services to create the API).
* Postman
  In any case, you should be able to explain how a REST API works and demonstrate that by creating functional tests that use the REST Layer directly. Please be prepared to use REST clients like Postman, cURL, etc. for this purpose.
* If it’s a web application, it must be a single-page application.
  All actions need to be done client-side using AJAX, refreshing the page is not acceptable. (If a mobile application, disregard this).
* Functional UI/UX design is needed.
  You are not required to create a unique design, however, do follow best practices to make the project as functional as possible.
* Write unit and e2e tests.